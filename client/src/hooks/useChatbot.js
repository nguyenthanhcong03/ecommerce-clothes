import { useState, useCallback, useEffect } from 'react';
import chatbotService from '../services/chatbotService';

const useChatbot = () => {
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [suggestions, setSuggestions] = useState([]);
  const [featuredProducts, setFeaturedProducts] = useState([]);
  const [status, setStatus] = useState({ available: false });

  // Khá»Ÿi táº¡o chat vá»›i tin nháº¯n chÃ o má»«ng
  const initializeChat = useCallback(async () => {
    try {
      // Láº¥y tráº¡ng thÃ¡i chatbot
      const statusResponse = await chatbotService.getChatbotStatus();
      console.log('statusResponse', statusResponse);
      setStatus(statusResponse.data);

      // Láº¥y gá»£i Ã½
      const suggestionsResponse = await chatbotService.getChatSuggestions();
      setSuggestions(suggestionsResponse.data?.sampleQuestions);
      setFeaturedProducts(suggestionsResponse.data?.featuredProducts);

      // Tin nháº¯n chÃ o má»«ng
      const welcomeMessage = {
        id: Date.now(),
        type: 'bot',
        content:
          'Xin chÃ o! TÃ´i lÃ  Trá»£ lÃ½ thÃ´ng minh cá»§a cá»­a hÃ ng Outfitory. TÃ´i cÃ³ thá»ƒ giÃºp báº¡n tÃ¬m kiáº¿m sáº£n pháº©m theo Ã½ muá»‘n. HÃ£y mÃ´ táº£ sáº£n pháº©m báº¡n Ä‘ang tÃ¬m kiáº¿m nhÃ©! ðŸ˜Š',
        timestamp: new Date(),
        products: []
      };

      setMessages([welcomeMessage]);
    } catch (error) {
      console.error('CÃ³ lá»—i khi khá»Ÿi táº¡o ChatBot:', error);
      const errorMessage = {
        id: Date.now(),
        type: 'bot',
        content: 'Xin lá»—i, chatbot hiá»‡n khÃ´ng kháº£ dá»¥ng. Báº¡n cÃ³ thá»ƒ tÃ¬m kiáº¿m sáº£n pháº©m thÃ´ng qua trang chá»§.',
        timestamp: new Date(),
        products: []
      };
      setMessages([errorMessage]);
    }
  }, []);

  // Gá»­i tin nháº¯n
  const sendMessage = useCallback(
    async (messageContent) => {
      if (!messageContent.trim() || isLoading) return;

      // ThÃªm tin nháº¯n cá»§a user
      const userMessage = {
        id: Date.now(),
        type: 'user',
        content: messageContent.trim(),
        timestamp: new Date()
      };

      setMessages((prev) => [...prev, userMessage]);
      setIsLoading(true);

      try {
        // Gá»­i tá»›i server
        const response = await chatbotService.sendMessage(messageContent);
        console.log('response', response);

        // ThÃªm pháº£n há»“i cá»§a bot
        const botMessage = {
          id: Date.now() + 1,
          type: 'bot',
          content: response.data.response,
          timestamp: new Date(),
          products: response.data.products || [],
          analysis: response.data.analysis
        };

        setMessages((prev) => [...prev, botMessage]);
      } catch (error) {
        console.error('CÃ³ lá»—i xáº£y ra khi gá»­i tin nháº¯n:', error);

        // ThÃªm tin nháº¯n lá»—i
        const errorMessage = {
          id: Date.now() + 1,
          type: 'bot',
          content: 'Xin lá»—i, tÃ´i gáº·p sá»± cá»‘ khi xá»­ lÃ½ yÃªu cáº§u cá»§a báº¡n. Vui lÃ²ng thá»­ láº¡i sau.',
          timestamp: new Date(),
          products: []
        };

        setMessages((prev) => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    },
    [isLoading]
  );

  // Gá»­i tin nháº¯n gá»£i Ã½
  const sendSuggestion = useCallback(
    (suggestion) => {
      sendMessage(suggestion);
    },
    [sendMessage]
  );

  // XÃ³a lá»‹ch sá»­ chat
  const clearChat = useCallback(() => {
    initializeChat();
  }, [initializeChat]);

  // Toggle chat
  const toggleChat = useCallback(() => {
    setIsOpen((prev) => !prev);
  }, []);

  // Khá»Ÿi táº¡o khi hook Ä‘Æ°á»£c sá»­ dá»¥ng láº§n Ä‘áº§u
  useEffect(() => {
    initializeChat();
  }, [initializeChat]);

  return {
    messages,
    isLoading,
    isOpen,
    suggestions,
    featuredProducts,
    status,
    sendMessage,
    sendSuggestion,
    clearChat,
    toggleChat,
    setIsOpen
  };
};

export default useChatbot;
